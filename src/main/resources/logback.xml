<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true">
  <!--自定义环境变量-->
  <property name="LOG_PATH" value="${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}"/>
  <property name="LOG_FILE"
    value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
  <property name="ERROR_FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS}|{%m} %n"/>

  <contextName>mnemosyne-log</contextName>
  <!-- 项目全量日志，建议每个logger中都加入此appender，用于链路调用跟踪 -->
  <appender name="STDOUT" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_FILE}</file>
    <!-- 循环政策：基于时间创建日志文件 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 日志命名:单个文件大于128MB 按照时间+自增i 生成log文件 -->
      <fileNamePattern>${LOG_FILE}/.%d{yyyy-MM-dd}.gz</fileNamePattern>
      <maxHistory>${MAX_HISTORY:-7}</maxHistory>
    </rollingPolicy>
    <append>true</append>
    <!-- 日志格式 -->
    <encoder>
      <pattern>${CONSOLE_LOG_PATTERN}</pattern>
    </encoder>
  </appender>
  <!-- 普通日志 -->
  <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_PATH}/info.log</file>
    <!-- 循环政策：基于时间创建日志文件 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 日志命名:单个文件大于128MB 按照时间+自增i 生成log文件 -->
      <fileNamePattern>${LOG_PATH}/info-%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${MAX_FILE_SIZE:-10MB}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 最大保存时间：30天-->
      <maxHistory>${MAX_HISTORY:-0}</maxHistory>
    </rollingPolicy>
    <append>true</append>
    <!-- 日志格式 -->
    <encoder>
      <pattern>${CONSOLE_LOG_PATTERN}</pattern>
    </encoder>
    <!-- 日志级别过滤器 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 过滤的级别 -->
      <level>info</level>
      <!-- 匹配时的操作：接收（记录） -->
      <onMatch>ACCEPT</onMatch>
      <!-- 不匹配时的操作：拒绝（不记录） -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>
  <!-- 错误日志 -->
  <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_PATH}/error.log</file>
    <!-- 循环政策：基于时间创建日志文件 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 日志命名:单个文件大于2MB 按照时间+自增i 生成log文件 -->
      <fileNamePattern>${LOG_PATH}/error-%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${MAX_FILE_SIZE:-10MB}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 最大保存时间：180天-->
      <maxHistory>${MAX_HISTORY:-0}</maxHistory>
    </rollingPolicy>
    <append>true</append>
    <!-- 日志格式 -->
    <encoder>
      <pattern>${ERROR_FILE_LOG_PATTERN}</pattern>
    </encoder>
    <!-- 日志级别过滤器 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 过滤的级别 -->
      <level>ERROR</level>
      <!-- 匹配时的操作：接收（记录） -->
      <onMatch>ACCEPT</onMatch>
      <!-- 不匹配时的操作：拒绝（不记录） -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 选举日志 -->
  <appender name="ELECTION_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_PATH}/error.log</file>
    <!-- 循环政策：基于时间创建日志文件 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 日志命名:单个文件大于2MB 按照时间+自增i 生成log文件 -->
      <fileNamePattern>${LOG_PATH}/com.mnemosyne.election-%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${MAX_FILE_SIZE:-10MB}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 最大保存时间：180天-->
      <maxHistory>${MAX_HISTORY:-0}</maxHistory>
    </rollingPolicy>
    <append>true</append>
    <!-- 日志格式 -->
    <encoder>
      <pattern>${ERROR_FILE_LOG_PATTERN}</pattern>
    </encoder>
    <!-- 日志级别过滤器 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 过滤的级别 -->
      <level>INFO</level>
      <!-- 匹配时的操作：接收（记录） -->
      <onMatch>ACCEPT</onMatch>
      <!-- 不匹配时的操作：拒绝（不记录） -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 主节点日志 -->
  <appender name="MASTER_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_PATH}/error.log</file>
    <!-- 循环政策：基于时间创建日志文件 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 日志命名:单个文件大于2MB 按照时间+自增i 生成log文件 -->
      <fileNamePattern>${LOG_PATH}/com.mnemosyne.master-%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${MAX_FILE_SIZE:-10MB}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 最大保存时间：180天-->
      <maxHistory>${MAX_HISTORY:-0}</maxHistory>
    </rollingPolicy>
    <append>true</append>
    <!-- 日志格式 -->
    <encoder>
      <pattern>${ERROR_FILE_LOG_PATTERN}</pattern>
    </encoder>
    <!-- 日志级别过滤器 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 过滤的级别 -->
      <level>INFO</level>
      <!-- 匹配时的操作：接收（记录） -->
      <onMatch>ACCEPT</onMatch>
      <!-- 不匹配时的操作：拒绝（不记录） -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <!-- 选举日志 -->
  <appender name="SLAVE_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${LOG_PATH}/error.log</file>
    <!-- 循环政策：基于时间创建日志文件 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 日志命名:单个文件大于2MB 按照时间+自增i 生成log文件 -->
      <fileNamePattern>${LOG_PATH}/com.mnemosyne.slave-%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${MAX_FILE_SIZE:-10MB}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 最大保存时间：180天-->
      <maxHistory>${MAX_HISTORY:-0}</maxHistory>
    </rollingPolicy>
    <append>true</append>
    <!-- 日志格式 -->
    <encoder>
      <pattern>${ERROR_FILE_LOG_PATTERN}</pattern>
    </encoder>
    <!-- 日志级别过滤器 -->
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <!-- 过滤的级别 -->
      <level>INFO</level>
      <!-- 匹配时的操作：接收（记录） -->
      <onMatch>ACCEPT</onMatch>
      <!-- 不匹配时的操作：拒绝（不记录） -->
      <onMismatch>DENY</onMismatch>
    </filter>
  </appender>

  <logger name="default" level="INFO" additivity="false">
    <appender-ref ref="CONSOLE"/>
    <appender-ref ref="STDOUT"/>
  </logger>
  <logger name="info" level="INFO" additivity="false">
    <appender-ref ref="INFO_FILE"/>
    <appender-ref ref="STDOUT"/>
  </logger>
  <logger name="error" level="ERROR" additivity="false">
    <appender-ref ref="ERROR_FILE"/>
    <appender-ref ref="STDOUT"/>
  </logger>
  <logger name="com.mnemosyne.election" level="INFO" additivity="false">
    <appender-ref ref="ELECTION_FILE"/>
    <appender-ref ref="STDOUT"/>
  </logger>
  <logger name="com.mnemosyne.master" level="INFO" additivity="false">
    <appender-ref ref="MASTER_FILE"/>
    <appender-ref ref="STDOUT"/>
  </logger>
  <logger name="com.mnemosyne.slave" level="INFO" additivity="false">
    <appender-ref ref="SLAVE_FILE"/>
    <appender-ref ref="STDOUT"/>
  </logger>

  <root>
    <level value="INFO" />
    <appender-ref ref="STDOUT" />
    <appender-ref ref="FILE" />
    <appender-ref ref="ERROR_FILE" />
  </root>
</configuration>