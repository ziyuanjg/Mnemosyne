<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false" scan="true" scanPeriod="60 seconds">

  <!--引入默认配置-->
  <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
  <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>

  <!--自定义环境变量-->
  <property name="LOG_PATH" value="/Users/xiluo/logs/mnemosyne"/>
  <property name="LOG_FILE"
    value="/Users/xiluo/logs/mnemosyne/mnemosyne.log"/>
  <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS}|{%m} %n"/>

  <!-- 项目全量日志，建议每个logger中都加入此appender，用于链路调用跟踪 -->
  <appender class="ch.qos.logback.core.rolling.RollingFileAppender" name="STDOUT">
    <file>${LOG_FILE}</file>
    <!-- 循环政策：基于时间创建日志文件 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 日志命名:单个文件大于128MB 按照时间+自增i 生成log文件 -->
      <fileNamePattern>${LOG_FILE}/.%d{yyyy-MM-dd}.gz</fileNamePattern>
      <maxHistory>${MAX_HISTORY:-7}</maxHistory>
    </rollingPolicy>
    <append>true</append>
    <!-- 日志格式 -->
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset>
    </encoder>
  </appender>

  <!-- 错误日志 -->
  <appender class="ch.qos.logback.core.rolling.RollingFileAppender" name="ERROR_FILE">
    <file>${LOG_PATH}/error.log</file>
    <!-- 循环政策：基于时间创建日志文件 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 日志命名:单个文件大于2MB 按照时间+自增i 生成log文件 -->
      <fileNamePattern>${LOG_PATH}/error-%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${MAX_FILE_SIZE:-10MB}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 最大保存时间：180天-->
      <maxHistory>${MAX_HISTORY:-0}</maxHistory>
    </rollingPolicy>
    <append>true</append>
    <!-- 日志格式 -->
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset>
    </encoder>
  </appender>

  <!-- 选举日志 -->
  <appender class="ch.qos.logback.core.rolling.RollingFileAppender" name="ELECTION_FILE">
    <file>${LOG_PATH}/election.log</file>
    <!-- 循环政策：基于时间创建日志文件 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 日志命名:单个文件大于2MB 按照时间+自增i 生成log文件 -->
      <fileNamePattern>${LOG_PATH}/election-%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${MAX_FILE_SIZE:-10MB}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 最大保存时间：180天-->
      <maxHistory>${MAX_HISTORY:-0}</maxHistory>
    </rollingPolicy>
    <append>true</append>
    <!-- 日志格式 -->
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset>
    </encoder>
  </appender>

  <!-- 主节点日志 -->
  <appender class="ch.qos.logback.core.rolling.RollingFileAppender" name="MASTER_FILE">
    <file>${LOG_PATH}/master.log</file>
    <!-- 循环政策：基于时间创建日志文件 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 日志命名:单个文件大于2MB 按照时间+自增i 生成log文件 -->
      <fileNamePattern>${LOG_PATH}/master-%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${MAX_FILE_SIZE:-10MB}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 最大保存时间：180天-->
      <maxHistory>${MAX_HISTORY:-0}</maxHistory>
    </rollingPolicy>
    <append>true</append>
    <!-- 日志格式 -->
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset>
    </encoder>
  </appender>

  <!-- 子节点日志 -->
  <appender class="ch.qos.logback.core.rolling.RollingFileAppender" name="SLAVE_FILE">
    <file>${LOG_PATH}/slave.log</file>
    <!-- 循环政策：基于时间创建日志文件 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 日志命名:单个文件大于2MB 按照时间+自增i 生成log文件 -->
      <fileNamePattern>${LOG_PATH}/slave-%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${MAX_FILE_SIZE:-10MB}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 最大保存时间：180天-->
      <maxHistory>${MAX_HISTORY:-0}</maxHistory>
    </rollingPolicy>
    <append>true</append>
    <!-- 日志格式 -->
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset>
    </encoder>
  </appender>

  <!-- 任务日志 -->
  <appender class="ch.qos.logback.core.rolling.RollingFileAppender" name="TASK_FILE">
    <file>${LOG_PATH}/task.log</file>
    <!-- 循环政策：基于时间创建日志文件 -->
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <!-- 日志命名:单个文件大于2MB 按照时间+自增i 生成log文件 -->
      <fileNamePattern>${LOG_PATH}/task-%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
      <timeBasedFileNamingAndTriggeringPolicy
        class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
        <maxFileSize>${MAX_FILE_SIZE:-10MB}</maxFileSize>
      </timeBasedFileNamingAndTriggeringPolicy>
      <!-- 最大保存时间：180天-->
      <maxHistory>${MAX_HISTORY:-0}</maxHistory>
    </rollingPolicy>
    <append>true</append>
    <!-- 日志格式 -->
    <encoder>
      <pattern>${FILE_LOG_PATTERN}</pattern>
      <charset>UTF-8</charset>
    </encoder>
  </appender>

  <logger additivity="false" level="INFO" name="default">
    <appender-ref ref="STDOUT"/>
  </logger>
  <logger additivity="false" level="ERROR" name="error">
    <appender-ref ref="ERROR_FILE"/>
    <appender-ref ref="STDOUT"/>
  </logger>
  <logger additivity="false" level="INFO" name="election">
    <appender-ref ref="ELECTION_FILE"/>
    <appender-ref ref="STDOUT"/>
  </logger>
  <logger additivity="false" level="INFO" name="master">
    <appender-ref ref="MASTER_FILE"/>
    <appender-ref ref="STDOUT"/>
  </logger>
  <logger additivity="false" level="INFO" name="slave">
    <appender-ref ref="SLAVE_FILE"/>
    <appender-ref ref="STDOUT"/>
  </logger>
  <logger additivity="false" level="INFO" name="task">
    <appender-ref ref="TASK_FILE"/>
    <appender-ref ref="STDOUT"/>
  </logger>

  <root>
    <level value="INFO"/>
    <appender-ref ref="STDOUT"/>
  </root>
</configuration>